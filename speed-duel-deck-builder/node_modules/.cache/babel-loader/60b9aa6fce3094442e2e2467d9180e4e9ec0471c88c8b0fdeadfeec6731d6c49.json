{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\Desktop\\\\yu-gi-oh\\\\speed-duel-deck-builder\\\\src\\\\components\\\\DeckBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeckBuilder({\n  selectedCards\n}) {\n  _s();\n  const [deckSize, setDeckSize] = useState(20);\n  const [mainDeck, setMainDeck] = useState([]);\n  const [extraDeck, setExtraDeck] = useState([]);\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\n  const [keyCards, setKeyCards] = useState([]);\n\n  // Función para unificar el formato de una carta (opcional)\n  const standardizeCard = card => {\n    var _card$card_images, _card$card_images$;\n    return {\n      id: Number(((_card$card_images = card.card_images) === null || _card$card_images === void 0 ? void 0 : (_card$card_images$ = _card$card_images[0]) === null || _card$card_images$ === void 0 ? void 0 : _card$card_images$.id) || card.id),\n      name: card.name,\n      type: card.type,\n      card_images: card.card_images || [{\n        image_url: \"https://via.placeholder.com/100\",\n        id: 0\n      }]\n    };\n  };\n\n  // Función para exportar mainDeck y extraDeck a un archivo JSON\n  const exportDecksToFile = () => {\n    // Creamos un objeto que contenga ambos decks\n    const data = {\n      mainDeck,\n      extraDeck\n    };\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], {\n      type: \"application/json\"\n    });\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = \"mi_deck.json\"; // Nombre del archivo\n    a.click();\n  };\n\n  // Función para importar mainDeck y extraDeck desde un archivo JSON\n  const importDecksFromFile = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const importedData = JSON.parse(e.target.result);\n        // Aseguramos que existan los arrays en el JSON\n        const {\n          mainDeck: importedMain,\n          extraDeck: importedExtra\n        } = importedData;\n\n        // Si quieres estandarizar cada carta, hazlo aquí\n        const stdMain = (importedMain === null || importedMain === void 0 ? void 0 : importedMain.map(card => standardizeCard(card))) || [];\n        const stdExtra = (importedExtra === null || importedExtra === void 0 ? void 0 : importedExtra.map(card => standardizeCard(card))) || [];\n        setMainDeck(stdMain);\n        setExtraDeck(stdExtra);\n        console.log(\"Deck importado desde el archivo:\", importedData);\n      } catch (error) {\n        console.error(\"Error al importar el deck:\", error);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Función para clasificar cartas automáticamente\n  const classifyCards = cards => {\n    let newMainDeck = [];\n    let newExtraDeck = [];\n    cards.forEach(card => {\n      const stdCard = standardizeCard(card);\n      if ([\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some(type => stdCard.type.includes(type))) {\n        if (newExtraDeck.length < 15) newExtraDeck.push(stdCard);\n      } else {\n        if (newMainDeck.length < deckSize) newMainDeck.push(stdCard);\n      }\n    });\n    setMainDeck(newMainDeck);\n    setExtraDeck(newExtraDeck);\n  };\n\n  // Construir deck alrededor de cartas clave\n  const buildAroundKeyCards = () => {\n    let filteredCards = selectedCards.filter(card => keyCards.some(keyCard => Number(standardizeCard(keyCard).id) === Number(standardizeCard(card).id)));\n    classifyCards(filteredCards);\n  };\n\n  // Agregar carta clave\n  const addKeyCard = card => {\n    const stdCard = standardizeCard(card);\n    if (!keyCards.some(keyCard => Number(standardizeCard(keyCard).id) === Number(stdCard.id))) {\n      setKeyCards([...keyCards, stdCard]);\n    }\n  };\n\n  // Agregar carta manualmente\n  const addSelectedCard = () => {\n    const selectedCard = selectedCards.find(card => Number(standardizeCard(card).id) === Number(selectedCardId));\n    if (!selectedCard) return;\n    if ([\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some(type => selectedCard.type.includes(type))) {\n      addCardToExtraDeck(selectedCard);\n    } else {\n      addCardToMainDeck(selectedCard);\n    }\n  };\n  const addCardToMainDeck = card => {\n    const stdCard = standardizeCard(card);\n    if (mainDeck.length < deckSize) {\n      setMainDeck([...mainDeck, stdCard]);\n    } else {\n      alert(`El Main Deck ya tiene ${deckSize} cartas.`);\n    }\n  };\n  const addCardToExtraDeck = card => {\n    const stdCard = standardizeCard(card);\n    if (extraDeck.length < 15) {\n      setExtraDeck([...extraDeck, stdCard]);\n    } else {\n      alert(\"El Deck Extra ya tiene 15 cartas.\");\n    }\n  };\n  const removeCardFromMainDeck = card => {\n    const stdCard = standardizeCard(card);\n    setMainDeck(mainDeck.filter(c => Number(c.id) !== Number(stdCard.id)));\n  };\n  const removeCardFromExtraDeck = card => {\n    const stdCard = standardizeCard(card);\n    setExtraDeck(extraDeck.filter(c => Number(c.id) !== Number(stdCard.id)));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deck Autom\\xE1tico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Tama\\xF1o del Main Deck:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"20\",\n          max: \"30\",\n          value: deckSize,\n          onChange: e => setDeckSize(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => classifyCards(selectedCards),\n        children: \"Armar Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportDecksToFile,\n        children: \"Exportar Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: importDecksFromFile,\n        style: {\n          marginLeft: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Seleccionar Cartas Clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => addKeyCard(selectedCards.find(c => Number(c.id) === Number(e.target.value))),\n      defaultValue: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecciona una carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: card.id,\n        children: card.name\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buildAroundKeyCards,\n      children: \"Construir alrededor de cartas clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Agregar Carta Manualmente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedCardId(e.target.value),\n      defaultValue: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecciona una carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: card.id,\n        children: card.name\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addSelectedCard,\n      children: \"A\\xF1adir Carta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Main Deck (\", mainDeck.length, \"/\", deckSize, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mainDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), \" - \", card.type, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromMainDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Extra Deck (\", extraDeck.length, \"/15)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: extraDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), \" - \", card.type, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromExtraDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n\n// Funciones para exportar e importar decks\n_s(DeckBuilder, \"eNnCw94KrOnOOf4YOXcmxR2TDow=\");\n_c = DeckBuilder;\nasync function exportDecksToFile() {\n  // Se define en línea para que use los estados\n}\nasync function importDecksFromFile() {\n  // Se define en línea para que use los estados\n}\nexport default DeckBuilder;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DeckBuilder","selectedCards","_s","deckSize","setDeckSize","mainDeck","setMainDeck","extraDeck","setExtraDeck","selectedCardId","setSelectedCardId","keyCards","setKeyCards","standardizeCard","card","_card$card_images","_card$card_images$","id","Number","card_images","name","type","image_url","exportDecksToFile","data","jsonString","JSON","stringify","blob","Blob","a","document","createElement","href","URL","createObjectURL","download","click","importDecksFromFile","event","file","target","files","reader","FileReader","onload","e","importedData","parse","result","importedMain","importedExtra","stdMain","map","stdExtra","console","log","error","readAsText","classifyCards","cards","newMainDeck","newExtraDeck","forEach","stdCard","some","includes","length","push","buildAroundKeyCards","filteredCards","filter","keyCard","addKeyCard","addSelectedCard","selectedCard","find","addCardToExtraDeck","addCardToMainDeck","alert","removeCardFromMainDeck","c","removeCardFromExtraDeck","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","min","max","value","onChange","onClick","accept","marginLeft","defaultValue","index","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/DeckBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction DeckBuilder({ selectedCards }) {\r\n  const [deckSize, setDeckSize] = useState(20);\r\n  const [mainDeck, setMainDeck] = useState([]);\r\n  const [extraDeck, setExtraDeck] = useState([]);\r\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\r\n  const [keyCards, setKeyCards] = useState([]);\r\n\r\n  // Función para unificar el formato de una carta (opcional)\r\n  const standardizeCard = (card) => ({\r\n    id: Number(card.card_images?.[0]?.id || card.id),\r\n    name: card.name,\r\n    type: card.type,\r\n    card_images: card.card_images || [\r\n      { image_url: \"https://via.placeholder.com/100\", id: 0 },\r\n    ],\r\n  });\r\n\r\n  // Función para exportar mainDeck y extraDeck a un archivo JSON\r\n  const exportDecksToFile = () => {\r\n    // Creamos un objeto que contenga ambos decks\r\n    const data = {\r\n      mainDeck,\r\n      extraDeck,\r\n    };\r\n\r\n    const jsonString = JSON.stringify(data, null, 2);\r\n    const blob = new Blob([jsonString], { type: \"application/json\" });\r\n    const a = document.createElement(\"a\");\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = \"mi_deck.json\"; // Nombre del archivo\r\n    a.click();\r\n  };\r\n\r\n  // Función para importar mainDeck y extraDeck desde un archivo JSON\r\n  const importDecksFromFile = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      try {\r\n        const importedData = JSON.parse(e.target.result);\r\n        // Aseguramos que existan los arrays en el JSON\r\n        const { mainDeck: importedMain, extraDeck: importedExtra } = importedData;\r\n\r\n        // Si quieres estandarizar cada carta, hazlo aquí\r\n        const stdMain = importedMain?.map((card) => standardizeCard(card)) || [];\r\n        const stdExtra = importedExtra?.map((card) => standardizeCard(card)) || [];\r\n\r\n        setMainDeck(stdMain);\r\n        setExtraDeck(stdExtra);\r\n        console.log(\"Deck importado desde el archivo:\", importedData);\r\n      } catch (error) {\r\n        console.error(\"Error al importar el deck:\", error);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Función para clasificar cartas automáticamente\r\n  const classifyCards = (cards) => {\r\n    let newMainDeck = [];\r\n    let newExtraDeck = [];\r\n    cards.forEach((card) => {\r\n      const stdCard = standardizeCard(card);\r\n      if (\r\n        [\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some((type) =>\r\n          stdCard.type.includes(type)\r\n        )\r\n      ) {\r\n        if (newExtraDeck.length < 15) newExtraDeck.push(stdCard);\r\n      } else {\r\n        if (newMainDeck.length < deckSize) newMainDeck.push(stdCard);\r\n      }\r\n    });\r\n    setMainDeck(newMainDeck);\r\n    setExtraDeck(newExtraDeck);\r\n  };\r\n\r\n  // Construir deck alrededor de cartas clave\r\n  const buildAroundKeyCards = () => {\r\n    let filteredCards = selectedCards.filter((card) =>\r\n      keyCards.some(\r\n        (keyCard) =>\r\n          Number(standardizeCard(keyCard).id) ===\r\n          Number(standardizeCard(card).id)\r\n      )\r\n    );\r\n    classifyCards(filteredCards);\r\n  };\r\n\r\n  // Agregar carta clave\r\n  const addKeyCard = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    if (\r\n      !keyCards.some(\r\n        (keyCard) =>\r\n          Number(standardizeCard(keyCard).id) === Number(stdCard.id)\r\n      )\r\n    ) {\r\n      setKeyCards([...keyCards, stdCard]);\r\n    }\r\n  };\r\n\r\n  // Agregar carta manualmente\r\n  const addSelectedCard = () => {\r\n    const selectedCard = selectedCards.find(\r\n      (card) => Number(standardizeCard(card).id) === Number(selectedCardId)\r\n    );\r\n    if (!selectedCard) return;\r\n    if (\r\n      [\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some((type) =>\r\n        selectedCard.type.includes(type)\r\n      )\r\n    ) {\r\n      addCardToExtraDeck(selectedCard);\r\n    } else {\r\n      addCardToMainDeck(selectedCard);\r\n    }\r\n  };\r\n\r\n  const addCardToMainDeck = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    if (mainDeck.length < deckSize) {\r\n      setMainDeck([...mainDeck, stdCard]);\r\n    } else {\r\n      alert(`El Main Deck ya tiene ${deckSize} cartas.`);\r\n    }\r\n  };\r\n\r\n  const addCardToExtraDeck = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    if (extraDeck.length < 15) {\r\n      setExtraDeck([...extraDeck, stdCard]);\r\n    } else {\r\n      alert(\"El Deck Extra ya tiene 15 cartas.\");\r\n    }\r\n  };\r\n\r\n  const removeCardFromMainDeck = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    setMainDeck(mainDeck.filter((c) => Number(c.id) !== Number(stdCard.id)));\r\n  };\r\n\r\n  const removeCardFromExtraDeck = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    setExtraDeck(extraDeck.filter((c) => Number(c.id) !== Number(stdCard.id)));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deck Automático</h2>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <label>\r\n          Tamaño del Main Deck:\r\n          <input\r\n            type=\"number\"\r\n            min=\"20\"\r\n            max=\"30\"\r\n            value={deckSize}\r\n            onChange={(e) => setDeckSize(Number(e.target.value))}\r\n          />\r\n        </label>\r\n        <button onClick={() => classifyCards(selectedCards)}>\r\n          Armar Deck\r\n        </button>\r\n      </div>\r\n\r\n      {/* Botones para exportar e importar decks */}\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <button onClick={exportDecksToFile}>Exportar Deck</button>\r\n        <input\r\n          type=\"file\"\r\n          accept=\".json\"\r\n          onChange={importDecksFromFile}\r\n          style={{ marginLeft: \"10px\" }}\r\n        />\r\n      </div>\r\n\r\n      <h3>Seleccionar Cartas Clave</h3>\r\n      <select\r\n        onChange={(e) =>\r\n          addKeyCard(\r\n            selectedCards.find((c) => Number(c.id) === Number(e.target.value))\r\n          )\r\n        }\r\n        defaultValue=\"\"\r\n      >\r\n        <option value=\"\">Selecciona una carta</option>\r\n        {selectedCards.map((card) => (\r\n          <option key={card.id} value={card.id}>\r\n            {card.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={buildAroundKeyCards}>Construir alrededor de cartas clave</button>\r\n\r\n      <h3>Agregar Carta Manualmente</h3>\r\n      <select onChange={(e) => setSelectedCardId(e.target.value)} defaultValue=\"\">\r\n        <option value=\"\">Selecciona una carta</option>\r\n        {selectedCards.map((card) => (\r\n          <option key={card.id} value={card.id}>\r\n            {card.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={addSelectedCard}>Añadir Carta</button>\r\n\r\n      {/* Main Deck */}\r\n      <div>\r\n        <h3>Main Deck ({mainDeck.length}/{deckSize})</h3>\r\n        <ul>\r\n          {mainDeck.map((card, index) => (\r\n            <li key={`${card.id}-${index}`}>\r\n              <strong>{card.name}</strong> - {card.type}\r\n              <button onClick={() => removeCardFromMainDeck(card)}>\r\n                Eliminar\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Extra Deck */}\r\n      <div>\r\n        <h3>Extra Deck ({extraDeck.length}/15)</h3>\r\n        <ul>\r\n          {extraDeck.map((card, index) => (\r\n            <li key={`${card.id}-${index}`}>\r\n              <strong>{card.name}</strong> - {card.type}\r\n              <button onClick={() => removeCardFromExtraDeck(card)}>\r\n                Eliminar\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Funciones para exportar e importar decks\r\nasync function exportDecksToFile() {\r\n  // Se define en línea para que use los estados\r\n}\r\n\r\nasync function importDecksFromFile() {\r\n  // Se define en línea para que use los estados\r\n}\r\n\r\nexport default DeckBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}