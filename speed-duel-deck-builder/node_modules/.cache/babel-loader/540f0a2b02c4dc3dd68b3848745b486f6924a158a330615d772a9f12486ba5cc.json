{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\Desktop\\\\yu-gi-oh\\\\speed-duel-deck-builder\\\\src\\\\components\\\\DeckBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeckBuilder({\n  selectedCards\n}) {\n  _s();\n  const [deckSize, setDeckSize] = useState(20);\n  const [mainDeck, setMainDeck] = useState([]);\n  const [extraDeck, setExtraDeck] = useState([]);\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\n  const [keyCards, setKeyCards] = useState([]);\n\n  // Función para estandarizar el formato de una carta\n  const standardizeCard = card => {\n    var _card$card_images, _card$card_images$;\n    return {\n      id: Number(((_card$card_images = card.card_images) === null || _card$card_images === void 0 ? void 0 : (_card$card_images$ = _card$card_images[0]) === null || _card$card_images$ === void 0 ? void 0 : _card$card_images$.id) || card.id),\n      name: card.name,\n      type: card.type,\n      card_images: card.card_images || [{\n        image_url: \"https://via.placeholder.com/100\",\n        id: 0\n      }]\n    };\n  };\n\n  // Clasifica las cartas entre Main Deck y Extra Deck\n  const classifyCards = cards => {\n    let newMainDeck = [];\n    let newExtraDeck = [];\n    cards.forEach(card => {\n      const stdCard = standardizeCard(card);\n      if ([\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some(type => stdCard.type.includes(type))) {\n        if (newExtraDeck.length < 15) newExtraDeck.push(stdCard);\n      } else {\n        if (newMainDeck.length < deckSize) newMainDeck.push(stdCard);\n      }\n    });\n    setMainDeck(newMainDeck);\n    setExtraDeck(newExtraDeck);\n  };\n\n  // Construye el deck basado en cartas clave\n  const buildAroundKeyCards = () => {\n    let filteredCards = selectedCards.filter(card => keyCards.some(keyCard => Number(standardizeCard(keyCard).id) === Number(standardizeCard(card).id)));\n    classifyCards(filteredCards);\n  };\n\n  // Agregar una carta clave\n  const addKeyCard = card => {\n    const stdCard = standardizeCard(card);\n    if (!keyCards.some(keyCard => Number(keyCard.id) === Number(stdCard.id))) {\n      setKeyCards([...keyCards, stdCard]);\n    }\n  };\n\n  // Agrega una carta manualmente al deck\n  const addSelectedCard = () => {\n    const selectedCard = selectedCards.find(card => Number(standardizeCard(card).id) === Number(selectedCardId));\n    if (!selectedCard) return;\n    if ([\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some(type => selectedCard.type.includes(type))) {\n      addCardToExtraDeck(selectedCard);\n    } else {\n      addCardToMainDeck(selectedCard);\n    }\n  };\n  const addCardToMainDeck = card => {\n    if (mainDeck.length < deckSize) setMainDeck([...mainDeck, standardizeCard(card)]);else alert(`El Main Deck ya tiene ${deckSize} cartas.`);\n  };\n  const addCardToExtraDeck = card => {\n    if (extraDeck.length < 15) setExtraDeck([...extraDeck, standardizeCard(card)]);else alert(\"El Deck Extra ya tiene 15 cartas.\");\n  };\n\n  // Elimina solo UNA copia de la carta del Main Deck\n  const removeCardFromMainDeck = card => {\n    const index = mainDeck.findIndex(c => Number(c.id) === Number(card.id));\n    if (index !== -1) {\n      let newDeck = [...mainDeck];\n      newDeck.splice(index, 1);\n      setMainDeck(newDeck);\n    }\n  };\n\n  // Elimina solo UNA copia de la carta del Extra Deck\n  const removeCardFromExtraDeck = card => {\n    const index = extraDeck.findIndex(c => Number(c.id) === Number(card.id));\n    if (index !== -1) {\n      let newDeck = [...extraDeck];\n      newDeck.splice(index, 1);\n      setExtraDeck(newDeck);\n    }\n  };\n\n  // Guarda el deck en un archivo JSON\n  const saveDeckToFile = () => {\n    const deckData = {\n      mainDeck,\n      extraDeck\n    };\n    const blob = new Blob([JSON.stringify(deckData, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"deck.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  // Carga un deck desde un archivo JSON\n  const loadDeckFromFile = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const deckData = JSON.parse(e.target.result);\n        setMainDeck(deckData.mainDeck || []);\n        setExtraDeck(deckData.extraDeck || []);\n      } catch (error) {\n        alert(\"Error al cargar el archivo. Asegúrate de que sea un JSON válido.\");\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deck Autom\\xE1tico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Tama\\xF1o del Main Deck:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"20\",\n        max: \"30\",\n        value: deckSize,\n        onChange: e => setDeckSize(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => classifyCards(selectedCards),\n      children: \"Armar Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Opciones de Guardado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveDeckToFile,\n      children: \"Guardar Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: loadDeckFromFile,\n      accept: \".json\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Seleccionar Cartas Clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => addKeyCard(selectedCards.find(c => Number(c.id) === Number(e.target.value))),\n      defaultValue: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecciona una carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: card.id,\n        children: card.name\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buildAroundKeyCards,\n      children: \"Construir alrededor de cartas clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Main Deck (\", mainDeck.length, \"/\", deckSize, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: \"10px\"\n        },\n        children: mainDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            cursor: \"pointer\",\n            transition: \"transform 0.2s\"\n          },\n          onMouseEnter: e => e.currentTarget.style.transform = \"scale(1.5)\",\n          onMouseLeave: e => e.currentTarget.style.transform = \"scale(1)\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.card_images[0].image_url,\n            alt: card.name,\n            width: \"100\",\n            height: \"140\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromMainDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Extra Deck (\", extraDeck.length, \"/15)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: \"10px\"\n        },\n        children: extraDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            cursor: \"pointer\",\n            transition: \"transform 0.2s\"\n          },\n          onMouseEnter: e => e.currentTarget.style.transform = \"scale(1.5)\",\n          onMouseLeave: e => e.currentTarget.style.transform = \"scale(1)\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.card_images[0].image_url,\n            alt: card.name,\n            width: \"100\",\n            height: \"140\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromExtraDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(DeckBuilder, \"eNnCw94KrOnOOf4YOXcmxR2TDow=\");\n_c = DeckBuilder;\nexport default DeckBuilder;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DeckBuilder","selectedCards","_s","deckSize","setDeckSize","mainDeck","setMainDeck","extraDeck","setExtraDeck","selectedCardId","setSelectedCardId","keyCards","setKeyCards","standardizeCard","card","_card$card_images","_card$card_images$","id","Number","card_images","name","type","image_url","classifyCards","cards","newMainDeck","newExtraDeck","forEach","stdCard","some","includes","length","push","buildAroundKeyCards","filteredCards","filter","keyCard","addKeyCard","addSelectedCard","selectedCard","find","addCardToExtraDeck","addCardToMainDeck","alert","removeCardFromMainDeck","index","findIndex","c","newDeck","splice","removeCardFromExtraDeck","saveDeckToFile","deckData","blob","Blob","JSON","stringify","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","loadDeckFromFile","event","file","target","files","reader","FileReader","onload","e","parse","result","error","readAsText","children","fileName","_jsxFileName","lineNumber","columnNumber","min","max","value","onChange","onClick","accept","defaultValue","map","style","display","flexWrap","gap","textAlign","cursor","transition","onMouseEnter","currentTarget","transform","onMouseLeave","src","alt","width","height","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/DeckBuilder.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction DeckBuilder({ selectedCards }) {\r\n  const [deckSize, setDeckSize] = useState(20);\r\n  const [mainDeck, setMainDeck] = useState([]);\r\n  const [extraDeck, setExtraDeck] = useState([]);\r\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\r\n  const [keyCards, setKeyCards] = useState([]);\r\n\r\n  // Función para estandarizar el formato de una carta\r\n  const standardizeCard = (card) => ({\r\n    id: Number(card.card_images?.[0]?.id || card.id),\r\n    name: card.name,\r\n    type: card.type,\r\n    card_images: card.card_images || [\r\n      { image_url: \"https://via.placeholder.com/100\", id: 0 },\r\n    ],\r\n  });\r\n\r\n  // Clasifica las cartas entre Main Deck y Extra Deck\r\n  const classifyCards = (cards) => {\r\n    let newMainDeck = [];\r\n    let newExtraDeck = [];\r\n    cards.forEach((card) => {\r\n      const stdCard = standardizeCard(card);\r\n      if (\r\n        [\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some((type) =>\r\n          stdCard.type.includes(type)\r\n        )\r\n      ) {\r\n        if (newExtraDeck.length < 15) newExtraDeck.push(stdCard);\r\n      } else {\r\n        if (newMainDeck.length < deckSize) newMainDeck.push(stdCard);\r\n      }\r\n    });\r\n    setMainDeck(newMainDeck);\r\n    setExtraDeck(newExtraDeck);\r\n  };\r\n\r\n  // Construye el deck basado en cartas clave\r\n  const buildAroundKeyCards = () => {\r\n    let filteredCards = selectedCards.filter((card) =>\r\n      keyCards.some(\r\n        (keyCard) =>\r\n          Number(standardizeCard(keyCard).id) ===\r\n          Number(standardizeCard(card).id)\r\n      )\r\n    );\r\n    classifyCards(filteredCards);\r\n  };\r\n\r\n  // Agregar una carta clave\r\n  const addKeyCard = (card) => {\r\n    const stdCard = standardizeCard(card);\r\n    if (!keyCards.some((keyCard) => Number(keyCard.id) === Number(stdCard.id))) {\r\n      setKeyCards([...keyCards, stdCard]);\r\n    }\r\n  };\r\n\r\n  // Agrega una carta manualmente al deck\r\n  const addSelectedCard = () => {\r\n    const selectedCard = selectedCards.find(\r\n      (card) => Number(standardizeCard(card).id) === Number(selectedCardId)\r\n    );\r\n    if (!selectedCard) return;\r\n\r\n    if (\r\n      [\"Fusion\", \"Synchro\", \"XYZ\", \"Link\"].some((type) =>\r\n        selectedCard.type.includes(type)\r\n      )\r\n    ) {\r\n      addCardToExtraDeck(selectedCard);\r\n    } else {\r\n      addCardToMainDeck(selectedCard);\r\n    }\r\n  };\r\n\r\n  const addCardToMainDeck = (card) => {\r\n    if (mainDeck.length < deckSize) setMainDeck([...mainDeck, standardizeCard(card)]);\r\n    else alert(`El Main Deck ya tiene ${deckSize} cartas.`);\r\n  };\r\n\r\n  const addCardToExtraDeck = (card) => {\r\n    if (extraDeck.length < 15) setExtraDeck([...extraDeck, standardizeCard(card)]);\r\n    else alert(\"El Deck Extra ya tiene 15 cartas.\");\r\n  };\r\n\r\n  // Elimina solo UNA copia de la carta del Main Deck\r\n  const removeCardFromMainDeck = (card) => {\r\n    const index = mainDeck.findIndex((c) => Number(c.id) === Number(card.id));\r\n    if (index !== -1) {\r\n      let newDeck = [...mainDeck];\r\n      newDeck.splice(index, 1);\r\n      setMainDeck(newDeck);\r\n    }\r\n  };\r\n\r\n  // Elimina solo UNA copia de la carta del Extra Deck\r\n  const removeCardFromExtraDeck = (card) => {\r\n    const index = extraDeck.findIndex((c) => Number(c.id) === Number(card.id));\r\n    if (index !== -1) {\r\n      let newDeck = [...extraDeck];\r\n      newDeck.splice(index, 1);\r\n      setExtraDeck(newDeck);\r\n    }\r\n  };\r\n\r\n  // Guarda el deck en un archivo JSON\r\n  const saveDeckToFile = () => {\r\n    const deckData = { mainDeck, extraDeck };\r\n    const blob = new Blob([JSON.stringify(deckData, null, 2)], { type: \"application/json\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"deck.json\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  };\r\n\r\n  // Carga un deck desde un archivo JSON\r\n  const loadDeckFromFile = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      try {\r\n        const deckData = JSON.parse(e.target.result);\r\n        setMainDeck(deckData.mainDeck || []);\r\n        setExtraDeck(deckData.extraDeck || []);\r\n      } catch (error) {\r\n        alert(\"Error al cargar el archivo. Asegúrate de que sea un JSON válido.\");\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deck Automático</h2>\r\n      <label>\r\n        Tamaño del Main Deck:\r\n        <input\r\n          type=\"number\"\r\n          min=\"20\"\r\n          max=\"30\"\r\n          value={deckSize}\r\n          onChange={(e) => setDeckSize(Number(e.target.value))}\r\n        />\r\n      </label>\r\n      <button onClick={() => classifyCards(selectedCards)}>Armar Deck</button>\r\n\r\n      <h3>Opciones de Guardado</h3>\r\n      <button onClick={saveDeckToFile}>Guardar Deck</button>\r\n      <input type=\"file\" onChange={loadDeckFromFile} accept=\".json\" />\r\n\r\n      <h3>Seleccionar Cartas Clave</h3>\r\n      <select\r\n        onChange={(e) =>\r\n          addKeyCard(selectedCards.find((c) => Number(c.id) === Number(e.target.value)))\r\n        }\r\n        defaultValue=\"\"\r\n      >\r\n        <option value=\"\">Selecciona una carta</option>\r\n        {selectedCards.map((card) => (\r\n          <option key={card.id} value={card.id}>\r\n            {card.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={buildAroundKeyCards}>Construir alrededor de cartas clave</button>\r\n\r\n      {/* Main Deck */}\r\n      <div>\r\n        <h3>Main Deck ({mainDeck.length}/{deckSize})</h3>\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n          {mainDeck.map((card, index) => (\r\n            <div\r\n              key={`${card.id}-${index}`}\r\n              style={{\r\n                textAlign: \"center\",\r\n                cursor: \"pointer\",\r\n                transition: \"transform 0.2s\",\r\n              }}\r\n              onMouseEnter={(e) => (e.currentTarget.style.transform = \"scale(1.5)\")}\r\n              onMouseLeave={(e) => (e.currentTarget.style.transform = \"scale(1)\")}\r\n            >\r\n              <img src={card.card_images[0].image_url} alt={card.name} width=\"100\" height=\"140\" />\r\n              <p>{card.name}</p>\r\n              <button onClick={() => removeCardFromMainDeck(card)}>Eliminar</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Extra Deck */}\r\n      <div>\r\n        <h3>Extra Deck ({extraDeck.length}/15)</h3>\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n          {extraDeck.map((card, index) => (\r\n            <div\r\n              key={`${card.id}-${index}`}\r\n              style={{\r\n                textAlign: \"center\",\r\n                cursor: \"pointer\",\r\n                transition: \"transform 0.2s\",\r\n              }}\r\n              onMouseEnter={(e) => (e.currentTarget.style.transform = \"scale(1.5)\")}\r\n              onMouseLeave={(e) => (e.currentTarget.style.transform = \"scale(1)\")}\r\n            >\r\n              <img src={card.card_images[0].image_url} alt={card.name} width=\"100\" height=\"140\" />\r\n              <p>{card.name}</p>\r\n              <button onClick={() => removeCardFromExtraDeck(card)}>Eliminar</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}