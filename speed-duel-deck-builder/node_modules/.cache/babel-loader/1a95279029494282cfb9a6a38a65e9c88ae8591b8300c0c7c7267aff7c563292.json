{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\Desktop\\\\yu-gi-oh\\\\speed-duel-deck-builder\\\\src\\\\components\\\\DeckBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\"; // Importa Firestore y Auth\nimport { collection, addDoc, getDocs, query, where } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeckBuilder({\n  selectedCards\n}) {\n  _s();\n  const [deckSize, setDeckSize] = useState(20);\n  const [mainDeck, setMainDeck] = useState([]);\n  const [extraDeck, setExtraDeck] = useState([]);\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\n  const [keyCards, setKeyCards] = useState([]);\n  const [user, setUser] = useState(null);\n  const [loadingDecks, setLoadingDecks] = useState(true);\n  const [cards, setCards] = useState([]);\n  /*#__PURE__*/_jsxDEV(CardList, {\n    cards: cards,\n    setCards: setCards\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 1\n  }, this);\n  useEffect(() => {\n    // Verificar si hay un usuario autenticado\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setUser(user);\n      if (user) {\n        loadUserDecks(user.uid);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Cargar decks guardados del usuario\n  const loadUserDecks = async userId => {\n    setLoadingDecks(true);\n    const decksRef = collection(db, \"decks\");\n    const q = query(decksRef, where(\"userId\", \"==\", userId));\n    try {\n      const querySnapshot = await getDocs(q);\n      if (!querySnapshot.empty) {\n        querySnapshot.forEach(doc => {\n          const deckData = doc.data();\n          setMainDeck(deckData.mainDeck || []);\n          setExtraDeck(deckData.extraDeck || []);\n        });\n      }\n    } catch (error) {\n      console.error(\"Error cargando decks:\", error);\n    }\n    setLoadingDecks(false);\n  };\n\n  // Guardar deck en Firestore\n  const saveDeckToFirestore = async () => {\n    if (!user) {\n      alert(\"Debes iniciar sesión para guardar el deck.\");\n      return;\n    }\n    const deckRef = collection(db, \"decks\");\n    try {\n      await addDoc(deckRef, {\n        userId: user.uid,\n        mainDeck,\n        extraDeck,\n        timestamp: new Date()\n      });\n      alert(\"Deck guardado con éxito!\");\n    } catch (error) {\n      console.error(\"Error guardando deck:\", error);\n      alert(\"Hubo un error al guardar el deck.\");\n    }\n  };\n\n  // Clasificar cartas automáticamente\n  const classifyCards = cards => {\n    let newMainDeck = [...mainDeck];\n    let newExtraDeck = [...extraDeck];\n    cards.forEach(card => {\n      if (card.type.includes(\"Fusion\") || card.type.includes(\"Synchro\") || card.type.includes(\"XYZ\") || card.type.includes(\"Link\")) {\n        if (newExtraDeck.length < 15) {\n          newExtraDeck.push(card);\n        }\n      } else {\n        if (newMainDeck.length < deckSize) {\n          newMainDeck.push(card);\n        }\n      }\n    });\n    setMainDeck(newMainDeck);\n    setExtraDeck(newExtraDeck);\n  };\n\n  // Construir deck alrededor de cartas clave\n  const buildAroundKeyCards = () => {\n    let filteredCards = selectedCards.filter(card => keyCards.some(keyCard => keyCard.id === card.id));\n    classifyCards(filteredCards);\n  };\n\n  // Agregar carta clave\n  const addKeyCard = card => {\n    if (!keyCards.includes(card)) {\n      setKeyCards([...keyCards, card]);\n    }\n  };\n\n  // Agregar una carta manualmente\n  const addSelectedCard = () => {\n    const selectedCard = selectedCards.find(card => card.id === Number(selectedCardId));\n    if (!selectedCard) return;\n    if (selectedCard.type.includes(\"Fusion\") || selectedCard.type.includes(\"Synchro\") || selectedCard.type.includes(\"XYZ\") || selectedCard.type.includes(\"Link\")) {\n      addCardToExtraDeck(selectedCard);\n    } else {\n      addCardToMainDeck(selectedCard);\n    }\n  };\n\n  // Agregar carta al Main Deck\n  const addCardToMainDeck = card => {\n    if (mainDeck.length < deckSize) {\n      setMainDeck([...mainDeck, card]);\n    } else {\n      alert(`El Main Deck ya tiene ${deckSize} cartas.`);\n    }\n  };\n\n  // Agregar carta al Extra Deck\n  const addCardToExtraDeck = card => {\n    if (extraDeck.length < 15) {\n      setExtraDeck([...extraDeck, card]);\n    } else {\n      alert(\"El Deck Extra ya tiene 15 cartas.\");\n    }\n  };\n\n  // Eliminar carta del Main Deck\n  const removeCardFromMainDeck = card => {\n    const index = mainDeck.findIndex(c => c.id === card.id);\n    if (index !== -1) {\n      const newDeck = [...mainDeck];\n      newDeck.splice(index, 1);\n      setMainDeck(newDeck);\n    }\n  };\n\n  // Eliminar carta del Extra Deck\n  const removeCardFromExtraDeck = card => {\n    const index = extraDeck.findIndex(c => c.id === card.id);\n    if (index !== -1) {\n      const newDeck = [...extraDeck];\n      newDeck.splice(index, 1);\n      setExtraDeck(newDeck);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deck Autom\\xE1tico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Tama\\xF1o del Main Deck:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"20\",\n        max: \"30\",\n        value: deckSize,\n        onChange: e => setDeckSize(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => classifyCards(selectedCards),\n      children: \"Armar Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveDeckToFirestore,\n      children: \"Guardar Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), loadingDecks && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando decks guardados...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Seleccionar Cartas Clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => addKeyCard(selectedCards.find(c => c.id === Number(e.target.value))),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecciona una carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: card.id,\n        children: card.name\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buildAroundKeyCards,\n      children: \"Construir alrededor de cartas clave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Agregar Carta Manualmente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedCardId(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecciona una carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: card.id,\n        children: card.name\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addSelectedCard,\n      children: \"A\\xF1adir Carta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Main Deck (\", mainDeck.length, \"/\", deckSize, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mainDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), \" - \", card.type, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromMainDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Extra Deck (\", extraDeck.length, \"/15)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: extraDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), \" - \", card.type, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCardFromExtraDeck(card),\n            children: \"Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this)]\n        }, `${card.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(DeckBuilder, \"9eHie06wqtrmCr/XrMqUJ2PSIzc=\");\n_c = DeckBuilder;\nexport default DeckBuilder;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"names":["React","useState","useEffect","db","auth","collection","addDoc","getDocs","query","where","jsxDEV","_jsxDEV","DeckBuilder","selectedCards","_s","deckSize","setDeckSize","mainDeck","setMainDeck","extraDeck","setExtraDeck","selectedCardId","setSelectedCardId","keyCards","setKeyCards","user","setUser","loadingDecks","setLoadingDecks","cards","setCards","CardList","fileName","_jsxFileName","lineNumber","columnNumber","unsubscribe","onAuthStateChanged","loadUserDecks","uid","userId","decksRef","q","querySnapshot","empty","forEach","doc","deckData","data","error","console","saveDeckToFirestore","alert","deckRef","timestamp","Date","classifyCards","newMainDeck","newExtraDeck","card","type","includes","length","push","buildAroundKeyCards","filteredCards","filter","some","keyCard","id","addKeyCard","addSelectedCard","selectedCard","find","Number","addCardToExtraDeck","addCardToMainDeck","removeCardFromMainDeck","index","findIndex","c","newDeck","splice","removeCardFromExtraDeck","children","min","max","value","onChange","e","target","onClick","map","name","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/DeckBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { db, auth } from \"../firebaseConfig\"; // Importa Firestore y Auth\r\nimport { collection, addDoc, getDocs, query, where } from \"firebase/firestore\";\r\n\r\nfunction DeckBuilder({ selectedCards }) {\r\n  const [deckSize, setDeckSize] = useState(20);\r\n  const [mainDeck, setMainDeck] = useState([]);\r\n  const [extraDeck, setExtraDeck] = useState([]);\r\n  const [selectedCardId, setSelectedCardId] = useState(\"\");\r\n  const [keyCards, setKeyCards] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [loadingDecks, setLoadingDecks] = useState(true);\r\n  const [cards, setCards] = useState([]);\r\n<CardList cards={cards} setCards={setCards} />\r\n\r\n  useEffect(() => {\r\n    // Verificar si hay un usuario autenticado\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setUser(user);\r\n      if (user) {\r\n        loadUserDecks(user.uid);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Cargar decks guardados del usuario\r\n  const loadUserDecks = async (userId) => {\r\n    setLoadingDecks(true);\r\n    const decksRef = collection(db, \"decks\");\r\n    const q = query(decksRef, where(\"userId\", \"==\", userId));\r\n\r\n    try {\r\n      const querySnapshot = await getDocs(q);\r\n      if (!querySnapshot.empty) {\r\n        querySnapshot.forEach((doc) => {\r\n          const deckData = doc.data();\r\n          setMainDeck(deckData.mainDeck || []);\r\n          setExtraDeck(deckData.extraDeck || []);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error cargando decks:\", error);\r\n    }\r\n    setLoadingDecks(false);\r\n  };\r\n\r\n  // Guardar deck en Firestore\r\n  const saveDeckToFirestore = async () => {\r\n    if (!user) {\r\n      alert(\"Debes iniciar sesión para guardar el deck.\");\r\n      return;\r\n    }\r\n\r\n    const deckRef = collection(db, \"decks\");\r\n    try {\r\n      await addDoc(deckRef, {\r\n        userId: user.uid,\r\n        mainDeck,\r\n        extraDeck,\r\n        timestamp: new Date(),\r\n      });\r\n      alert(\"Deck guardado con éxito!\");\r\n    } catch (error) {\r\n      console.error(\"Error guardando deck:\", error);\r\n      alert(\"Hubo un error al guardar el deck.\");\r\n    }\r\n  };\r\n\r\n  // Clasificar cartas automáticamente\r\n  const classifyCards = (cards) => {\r\n    let newMainDeck = [...mainDeck];\r\n    let newExtraDeck = [...extraDeck];\r\n\r\n    cards.forEach((card) => {\r\n      if (\r\n        card.type.includes(\"Fusion\") ||\r\n        card.type.includes(\"Synchro\") ||\r\n        card.type.includes(\"XYZ\") ||\r\n        card.type.includes(\"Link\")\r\n      ) {\r\n        if (newExtraDeck.length < 15) {\r\n          newExtraDeck.push(card);\r\n        }\r\n      } else {\r\n        if (newMainDeck.length < deckSize) {\r\n          newMainDeck.push(card);\r\n        }\r\n      }\r\n    });\r\n\r\n    setMainDeck(newMainDeck);\r\n    setExtraDeck(newExtraDeck);\r\n  };\r\n\r\n  // Construir deck alrededor de cartas clave\r\n  const buildAroundKeyCards = () => {\r\n    let filteredCards = selectedCards.filter((card) =>\r\n      keyCards.some((keyCard) => keyCard.id === card.id)\r\n    );\r\n\r\n    classifyCards(filteredCards);\r\n  };\r\n\r\n  // Agregar carta clave\r\n  const addKeyCard = (card) => {\r\n    if (!keyCards.includes(card)) {\r\n      setKeyCards([...keyCards, card]);\r\n    }\r\n  };\r\n\r\n  // Agregar una carta manualmente\r\n  const addSelectedCard = () => {\r\n    const selectedCard = selectedCards.find((card) => card.id === Number(selectedCardId));\r\n    if (!selectedCard) return;\r\n\r\n    if (\r\n      selectedCard.type.includes(\"Fusion\") ||\r\n      selectedCard.type.includes(\"Synchro\") ||\r\n      selectedCard.type.includes(\"XYZ\") ||\r\n      selectedCard.type.includes(\"Link\")\r\n    ) {\r\n      addCardToExtraDeck(selectedCard);\r\n    } else {\r\n      addCardToMainDeck(selectedCard);\r\n    }\r\n  };\r\n\r\n  // Agregar carta al Main Deck\r\n  const addCardToMainDeck = (card) => {\r\n    if (mainDeck.length < deckSize) {\r\n      setMainDeck([...mainDeck, card]);\r\n    } else {\r\n      alert(`El Main Deck ya tiene ${deckSize} cartas.`);\r\n    }\r\n  };\r\n\r\n  // Agregar carta al Extra Deck\r\n  const addCardToExtraDeck = (card) => {\r\n    if (extraDeck.length < 15) {\r\n      setExtraDeck([...extraDeck, card]);\r\n    } else {\r\n      alert(\"El Deck Extra ya tiene 15 cartas.\");\r\n    }\r\n  };\r\n\r\n  // Eliminar carta del Main Deck\r\n  const removeCardFromMainDeck = (card) => {\r\n    const index = mainDeck.findIndex((c) => c.id === card.id);\r\n    if (index !== -1) {\r\n      const newDeck = [...mainDeck];\r\n      newDeck.splice(index, 1);\r\n      setMainDeck(newDeck);\r\n    }\r\n  };\r\n\r\n  // Eliminar carta del Extra Deck\r\n  const removeCardFromExtraDeck = (card) => {\r\n    const index = extraDeck.findIndex((c) => c.id === card.id);\r\n    if (index !== -1) {\r\n      const newDeck = [...extraDeck];\r\n      newDeck.splice(index, 1);\r\n      setExtraDeck(newDeck);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deck Automático</h2>\r\n      <label>\r\n        Tamaño del Main Deck:\r\n        <input\r\n          type=\"number\"\r\n          min=\"20\"\r\n          max=\"30\"\r\n          value={deckSize}\r\n          onChange={(e) => setDeckSize(Number(e.target.value))}\r\n        />\r\n      </label>\r\n      <button onClick={() => classifyCards(selectedCards)}>Armar Deck</button>\r\n      <button onClick={saveDeckToFirestore}>Guardar Deck</button>\r\n\r\n      {loadingDecks && <p>Cargando decks guardados...</p>}\r\n\r\n      {/* Sección para agregar cartas clave */}\r\n      <h3>Seleccionar Cartas Clave</h3>\r\n      <select onChange={(e) => addKeyCard(selectedCards.find((c) => c.id === Number(e.target.value)))}>\r\n        <option value=\"\">Selecciona una carta</option>\r\n        {selectedCards.map((card) => (\r\n          <option key={card.id} value={card.id}>\r\n            {card.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={buildAroundKeyCards}>Construir alrededor de cartas clave</button>\r\n\r\n      {/* Sección para agregar cartas manualmente */}\r\n      <h3>Agregar Carta Manualmente</h3>\r\n      <select onChange={(e) => setSelectedCardId(e.target.value)}>\r\n        <option value=\"\">Selecciona una carta</option>\r\n        {selectedCards.map((card) => (\r\n          <option key={card.id} value={card.id}>\r\n            {card.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={addSelectedCard}>Añadir Carta</button>\r\n\r\n      {/* Main Deck */}\r\n      <div>\r\n        <h3>Main Deck ({mainDeck.length}/{deckSize})</h3>\r\n        <ul>\r\n          {mainDeck.map((card, index) => (\r\n            <li key={`${card.id}-${index}`}>\r\n              <strong>{card.name}</strong> - {card.type}\r\n              <button onClick={() => removeCardFromMainDeck(card)}>Eliminar</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Extra Deck */}\r\n      <div>\r\n        <h3>Extra Deck ({extraDeck.length}/15)</h3>\r\n        <ul>\r\n          {extraDeck.map((card, index) => (\r\n            <li key={`${card.id}-${index}`}>\r\n              <strong>{card.name}</strong> - {card.type}\r\n              <button onClick={() => removeCardFromExtraDeck(card)}>Eliminar</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}