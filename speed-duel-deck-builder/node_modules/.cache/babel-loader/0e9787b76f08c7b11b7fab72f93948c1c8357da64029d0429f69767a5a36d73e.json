{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\Desktop\\\\yu-gi-oh\\\\speed-duel-deck-builder\\\\src\\\\components\\\\DeckBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DeckBuilder({\n  selectedCards\n}) {\n  _s();\n  const [deckSize, setDeckSize] = useState(20);\n  const [finalDeck, setFinalDeck] = useState([]);\n\n  // Construcción automática del deck basado en sinergia\n  const buildDeck = () => {\n    if (selectedCards.length < deckSize) {\n      alert(\"No tienes suficientes cartas seleccionadas para armar el deck.\");\n      return;\n    }\n\n    // Agrupar cartas por tipo\n    const cardGroups = selectedCards.reduce((acc, card) => {\n      acc[card.type] = acc[card.type] || [];\n      acc[card.type].push(card);\n      return acc;\n    }, {});\n\n    // Ordenar cartas (ejemplo: priorizando ATK alto)\n    const sortedCards = Object.values(cardGroups).flat().sort((a, b) => (b.atk || 0) - (a.atk || 0));\n\n    // Seleccionar las primeras cartas según el tamaño del deck\n    setFinalDeck(sortedCards.slice(0, deckSize));\n  };\n\n  // Eliminar una carta manualmente\n  const removeCard = index => {\n    setFinalDeck(finalDeck.filter((_, i) => i !== index));\n  };\n\n  // Mover cartas arriba/abajo\n  const moveCard = (index, direction) => {\n    const newDeck = [...finalDeck];\n    const targetIndex = index + direction;\n    if (targetIndex >= 0 && targetIndex < newDeck.length) {\n      [newDeck[index], newDeck[targetIndex]] = [newDeck[targetIndex], newDeck[index]];\n      setFinalDeck(newDeck);\n    }\n  };\n\n  // Agregar una carta manualmente desde un menú desplegable\n  const [selectedCard, setSelectedCard] = useState(\"\");\n  const addCardToDeck = () => {\n    const cardToAdd = selectedCards.find(card => card.name === selectedCard);\n    if (cardToAdd && finalDeck.length < 30) {\n      setFinalDeck([...finalDeck, cardToAdd]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deck Autom\\xE1tico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Tama\\xF1o del Deck:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"20\",\n        max: \"30\",\n        value: deckSize,\n        onChange: e => setDeckSize(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buildDeck,\n      children: \"Armar Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"A\\xF1adir Carta Individual\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCard,\n        onChange: e => setSelectedCard(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Selecciona una carta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), selectedCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: card.name,\n          children: card.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCardToDeck,\n        children: \"A\\xF1adir Carta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), finalDeck.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Deck Generado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: finalDeck.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), \" - \", card.type, /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.card_images[0].image_url,\n            alt: card.name,\n            width: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeCard(index),\n            children: \"\\u274C Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveCard(index, -1),\n            children: \"\\u2B06\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => moveCard(index, 1),\n            children: \"\\u2B07\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(DeckBuilder, \"i3kM9qEQFtzr/LscBYqVU6KKoL8=\");\n_c = DeckBuilder;\nexport default DeckBuilder;\nvar _c;\n$RefreshReg$(_c, \"DeckBuilder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DeckBuilder","selectedCards","_s","deckSize","setDeckSize","finalDeck","setFinalDeck","buildDeck","length","alert","cardGroups","reduce","acc","card","type","push","sortedCards","Object","values","flat","sort","a","b","atk","slice","removeCard","index","filter","_","i","moveCard","direction","newDeck","targetIndex","selectedCard","setSelectedCard","addCardToDeck","cardToAdd","find","name","children","fileName","_jsxFileName","lineNumber","columnNumber","min","max","value","onChange","e","Number","target","onClick","map","src","card_images","image_url","alt","width","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/DeckBuilder.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction DeckBuilder({ selectedCards }) {\r\n  const [deckSize, setDeckSize] = useState(20);\r\n  const [finalDeck, setFinalDeck] = useState([]);\r\n\r\n  // Construcción automática del deck basado en sinergia\r\n  const buildDeck = () => {\r\n    if (selectedCards.length < deckSize) {\r\n      alert(\"No tienes suficientes cartas seleccionadas para armar el deck.\");\r\n      return;\r\n    }\r\n\r\n    // Agrupar cartas por tipo\r\n    const cardGroups = selectedCards.reduce((acc, card) => {\r\n      acc[card.type] = acc[card.type] || [];\r\n      acc[card.type].push(card);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Ordenar cartas (ejemplo: priorizando ATK alto)\r\n    const sortedCards = Object.values(cardGroups)\r\n      .flat()\r\n      .sort((a, b) => (b.atk || 0) - (a.atk || 0));\r\n\r\n    // Seleccionar las primeras cartas según el tamaño del deck\r\n    setFinalDeck(sortedCards.slice(0, deckSize));\r\n  };\r\n\r\n  // Eliminar una carta manualmente\r\n  const removeCard = (index) => {\r\n    setFinalDeck(finalDeck.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Mover cartas arriba/abajo\r\n  const moveCard = (index, direction) => {\r\n    const newDeck = [...finalDeck];\r\n    const targetIndex = index + direction;\r\n\r\n    if (targetIndex >= 0 && targetIndex < newDeck.length) {\r\n      [newDeck[index], newDeck[targetIndex]] = [newDeck[targetIndex], newDeck[index]];\r\n      setFinalDeck(newDeck);\r\n    }\r\n  };\r\n\r\n  // Agregar una carta manualmente desde un menú desplegable\r\n  const [selectedCard, setSelectedCard] = useState(\"\");\r\n\r\n  const addCardToDeck = () => {\r\n    const cardToAdd = selectedCards.find((card) => card.name === selectedCard);\r\n    if (cardToAdd && finalDeck.length < 30) {\r\n      setFinalDeck([...finalDeck, cardToAdd]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Deck Automático</h2>\r\n      <label>\r\n        Tamaño del Deck:\r\n        <input\r\n          type=\"number\"\r\n          min=\"20\"\r\n          max=\"30\"\r\n          value={deckSize}\r\n          onChange={(e) => setDeckSize(Number(e.target.value))}\r\n        />\r\n      </label>\r\n      <button onClick={buildDeck}>Armar Deck</button>\r\n\r\n      {/* Agregar cartas manualmente */}\r\n      <div>\r\n        <h3>Añadir Carta Individual</h3>\r\n        <select value={selectedCard} onChange={(e) => setSelectedCard(e.target.value)}>\r\n          <option value=\"\">Selecciona una carta</option>\r\n          {selectedCards.map((card, index) => (\r\n            <option key={index} value={card.name}>\r\n              {card.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button onClick={addCardToDeck}>Añadir Carta</button>\r\n      </div>\r\n\r\n      {/* Mostrar el deck generado */}\r\n      {finalDeck.length > 0 && (\r\n        <div>\r\n          <h3>Deck Generado</h3>\r\n          <ul>\r\n            {finalDeck.map((card, index) => (\r\n              <li key={index}>\r\n                <strong>{card.name}</strong> - {card.type}\r\n                <img src={card.card_images[0].image_url} alt={card.name} width=\"100\" />\r\n                <button onClick={() => removeCard(index)}>❌ Eliminar</button>\r\n                <button onClick={() => moveCard(index, -1)}>⬆️</button>\r\n                <button onClick={() => moveCard(index, 1)}>⬇️</button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckBuilder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}