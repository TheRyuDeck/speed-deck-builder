{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebaseConfig\";\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\nfunction CardList({\n  cards = [],\n  setCards = () => {}\n}) {\n  _s();\n  const [savedCards, setSavedCards] = useState([]);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Verificar si el usuario estÃ¡ autenticado\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setUser(user);\n      if (user) {\n        loadUserDeck(user.uid);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // ðŸ”¹ Recuperar las cartas guardadas del usuario\n  const loadUserDeck = async userId => {\n    setLoading(true);\n    const decksRef = collection(db, \"decks\");\n    const q = query(decksRef, where(\"userId\", \"==\", userId));\n    try {\n      const querySnapshot = await getDocs(q);\n      if (!querySnapshot.empty) {\n        const deckData = querySnapshot.docs[0].data();\n        setSavedCards([...deckData.mainDeck, ...deckData.extraDeck]);\n      }\n    } catch (error) {\n      console.error(\"Error al cargar el deck:\", error);\n    }\n    setLoading(false);\n  };\n\n  // ðŸ”¹ Permitir seleccionar cartas guardadas para un nuevo deck\n  const handleSelectCard = card => {\n    console.log(\"Carta seleccionada:\", card); // âœ… Verifica si se ejecuta\n    if (typeof setCards !== \"function\") {\n      console.error(\"setCards no estÃ¡ definido correctamente.\");\n      return;\n    }\n    setCards(prevCards => [...prevCards, card]);\n  };\n}\n_s(CardList, \"HISm1ZTNRZy8M53fL4B4NGbUeSA=\");\n_c = CardList;\nexport default CardList;\nvar _c;\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"names":["React","useState","useEffect","db","auth","collection","getDocs","query","where","CardList","cards","setCards","_s","savedCards","setSavedCards","user","setUser","loading","setLoading","unsubscribe","onAuthStateChanged","loadUserDeck","uid","userId","decksRef","q","querySnapshot","empty","deckData","docs","data","mainDeck","extraDeck","error","console","handleSelectCard","card","log","prevCards","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/CardList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { db, auth } from \"../firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\n\r\nfunction CardList({ cards = [], setCards = () => {} }) {\r\n  const [savedCards, setSavedCards] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Verificar si el usuario estÃ¡ autenticado\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setUser(user);\r\n      if (user) {\r\n        loadUserDeck(user.uid);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // ðŸ”¹ Recuperar las cartas guardadas del usuario\r\n  const loadUserDeck = async (userId) => {\r\n    setLoading(true);\r\n    const decksRef = collection(db, \"decks\");\r\n    const q = query(decksRef, where(\"userId\", \"==\", userId));\r\n\r\n    try {\r\n      const querySnapshot = await getDocs(q);\r\n      if (!querySnapshot.empty) {\r\n        const deckData = querySnapshot.docs[0].data();\r\n        setSavedCards([...deckData.mainDeck, ...deckData.extraDeck]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al cargar el deck:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // ðŸ”¹ Permitir seleccionar cartas guardadas para un nuevo deck\r\n  const handleSelectCard = (card) => {\r\n    console.log(\"Carta seleccionada:\", card); // âœ… Verifica si se ejecuta\r\n    if (typeof setCards !== \"function\") {\r\n      console.error(\"setCards no estÃ¡ definido correctamente.\");\r\n      return;\r\n    }\r\n    setCards((prevCards) => [...prevCards, card]); \r\n  };\r\n\r\n \r\n}\r\n\r\nexport default CardList;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,EAAEC,IAAI,QAAQ,mBAAmB;AAC5C,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAEtE,SAASC,QAAQA,CAAC;EAAEC,KAAK,GAAG,EAAE;EAAEC,QAAQ,GAAGA,CAAA,KAAM,CAAC;AAAE,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,WAAW,GAAGf,IAAI,CAACgB,kBAAkB,CAAEL,IAAI,IAAK;MACpDC,OAAO,CAACD,IAAI,CAAC;MACb,IAAIA,IAAI,EAAE;QACRM,YAAY,CAACN,IAAI,CAACO,GAAG,CAAC;MACxB;IACF,CAAC,CAAC;IAEF,OAAO,MAAMH,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,YAAY,GAAG,MAAOE,MAAM,IAAK;IACrCL,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMM,QAAQ,GAAGnB,UAAU,CAACF,EAAE,EAAE,OAAO,CAAC;IACxC,MAAMsB,CAAC,GAAGlB,KAAK,CAACiB,QAAQ,EAAEhB,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEe,MAAM,CAAC,CAAC;IAExD,IAAI;MACF,MAAMG,aAAa,GAAG,MAAMpB,OAAO,CAACmB,CAAC,CAAC;MACtC,IAAI,CAACC,aAAa,CAACC,KAAK,EAAE;QACxB,MAAMC,QAAQ,GAAGF,aAAa,CAACG,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;QAC7ChB,aAAa,CAAC,CAAC,GAAGc,QAAQ,CAACG,QAAQ,EAAE,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;IACAf,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;;EAED;EACA,MAAMiB,gBAAgB,GAAIC,IAAI,IAAK;IACjCF,OAAO,CAACG,GAAG,CAAC,qBAAqB,EAAED,IAAI,CAAC,CAAC,CAAC;IAC1C,IAAI,OAAOzB,QAAQ,KAAK,UAAU,EAAE;MAClCuB,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAC;MACzD;IACF;IACAtB,QAAQ,CAAE2B,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEF,IAAI,CAAC,CAAC;EAC/C,CAAC;AAGH;AAACxB,EAAA,CA9CQH,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAgDjB,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}