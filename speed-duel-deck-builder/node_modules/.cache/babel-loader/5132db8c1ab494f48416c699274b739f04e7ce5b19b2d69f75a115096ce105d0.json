{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\migue\\\\Desktop\\\\yu-gi-oh\\\\speed-duel-deck-builder\\\\src\\\\components\\\\CardList.js\";\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardList({\n  cards,\n  setCards\n}) {\n  // Función para exportar la lista de cartas a un archivo JSON\n  const exportToFile = () => {\n    const data = JSON.stringify(cards.map(card => card.id), null, 2);\n    const blob = new Blob([data], {\n      type: \"application/json\"\n    });\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = \"cartas_seleccionadas.json\";\n    a.click();\n  };\n\n  // Función para importar la lista de cartas desde un archivo JSON\n  const importFromFile = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = async e => {\n      try {\n        const importedIds = JSON.parse(e.target.result);\n        // Aquí debes reemplazar `fetchCardById` con la función que recupera cartas por su ID\n        const importedCards = importedIds.map(id => fetchCardById(id));\n        setCards(await Promise.all(importedCards));\n      } catch (error) {\n        console.error(\"Error al importar archivo:\", error);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cartas Seleccionadas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportToFile,\n      children: \"Guardar Cartas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".json\",\n      onChange: importFromFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: cards.length > 0 ? cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"10px\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.card_images[0].image_url,\n          alt: card.name,\n          width: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)]\n      }, card.instanceId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay cartas seleccionadas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n// Simulación de función que obtiene una carta por su ID (debes reemplazarla con tu sistema de búsqueda)\n_c = CardList;\nconst fetchCardById = async id => {\n  // Aquí puedes hacer una petición a una API o buscar en una lista local\n  return {\n    id,\n    name: `Carta ${id}`,\n    card_images: [{\n      image_url: \"https://via.placeholder.com/100\"\n    }]\n  };\n};\nexport default CardList;\nvar _c;\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","CardList","cards","setCards","exportToFile","data","JSON","stringify","map","card","id","blob","Blob","type","a","document","createElement","href","URL","createObjectURL","download","click","importFromFile","event","file","target","files","reader","FileReader","onload","e","importedIds","parse","result","importedCards","fetchCardById","Promise","all","error","console","readAsText","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","accept","onChange","style","display","flexWrap","length","margin","textAlign","src","card_images","image_url","alt","name","width","instanceId","_c","$RefreshReg$"],"sources":["C:/Users/migue/Desktop/yu-gi-oh/speed-duel-deck-builder/src/components/CardList.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nfunction CardList({ cards, setCards }) {\r\n  // Función para exportar la lista de cartas a un archivo JSON\r\n  const exportToFile = () => {\r\n    const data = JSON.stringify(cards.map((card) => card.id), null, 2);\r\n    const blob = new Blob([data], { type: \"application/json\" });\r\n    const a = document.createElement(\"a\");\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = \"cartas_seleccionadas.json\";\r\n    a.click();\r\n  };\r\n\r\n  // Función para importar la lista de cartas desde un archivo JSON\r\n  const importFromFile = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      try {\r\n        const importedIds = JSON.parse(e.target.result);\r\n        // Aquí debes reemplazar `fetchCardById` con la función que recupera cartas por su ID\r\n        const importedCards = importedIds.map((id) => fetchCardById(id));\r\n        setCards(await Promise.all(importedCards));\r\n      } catch (error) {\r\n        console.error(\"Error al importar archivo:\", error);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Cartas Seleccionadas</h2>\r\n      <button onClick={exportToFile}>Guardar Cartas</button>\r\n      <input type=\"file\" accept=\".json\" onChange={importFromFile} />\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {cards.length > 0 ? (\r\n          cards.map((card) => (\r\n            <div\r\n              key={card.instanceId}\r\n              style={{ margin: \"10px\", textAlign: \"center\" }}\r\n            >\r\n              <img\r\n                src={card.card_images[0].image_url}\r\n                alt={card.name}\r\n                width=\"100\"\r\n              />\r\n              <p>{card.name}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No hay cartas seleccionadas.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Simulación de función que obtiene una carta por su ID (debes reemplazarla con tu sistema de búsqueda)\r\nconst fetchCardById = async (id) => {\r\n  // Aquí puedes hacer una petición a una API o buscar en una lista local\r\n  return { id, name: `Carta ${id}`, card_images: [{ image_url: \"https://via.placeholder.com/100\" }] };\r\n};\r\n\r\nexport default CardList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}